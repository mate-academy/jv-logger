package mate.academy.service;

import java.math.BigDecimal;
import java.util.List;

import mate.academy.model.Order;
import mate.academy.model.Product;

import java.util.logging.Logger;

/**
 * The implementation of the OrderService interface.
 */
public class OrderServiceImpl implements OrderService {
    /**
     * Logger for this class.
     */
    private static final Logger LOGGER = Logger.getLogger(
            OrderServiceImpl.class.getName());

    /**
     * Completes an order for the user with the specified ID.
     *
     * @param userId the ID of the user
     * @return the completed order
     */
    @Override
    public Order completeOrder(final Long userId) {
        LOGGER.info("Method completeOrder was called with userId: "
                + userId);
        List<Product> products = getAllProductsFromShoppingCart(userId);
        Order order = new Order(products, userId);
        // NOTE: In production-ready code,
        // this order identifier should be generated by the DB
        // For test purposes, we simplify this and return dummy data
        order.setOrderId(1L);
        return order;
    }

    /**
     * Price for iPhone.
     */
    private static final BigDecimal IPHONE_PRICE
            = BigDecimal.valueOf(1199);

    /**
     * Price for MacBook.
     */
    private static final BigDecimal MACBOOK_PRICE
            = BigDecimal.valueOf(1399);

    /**
     * Price for Xiaomi.
     */
    private static final BigDecimal XIAOMI_PRICE
            = BigDecimal.valueOf(499);

    private List<Product> getAllProductsFromShoppingCart(final Long userId) {
        LOGGER.info("Data fetched successfully from the "
                + "shopping cart for userId: "
                + userId);
        // NOTE: In production ready code this method should fetch data from DB
        // For test purpose we simplify this method and return dummy data
        Product iphone = new Product("iPhone X", IPHONE_PRICE);
        Product macBook = new Product("MacBook Air 2020", MACBOOK_PRICE);
        Product xiaomi = new Product("Xiaomi 12", XIAOMI_PRICE);
        return List.of(iphone, macBook, xiaomi);
    }
}
